------------------------------------------------------------------------------
-- Berekeley BTree Files Package Parser                                     --
--                                                                          --
-- Part of SparForte                                                        --
------------------------------------------------------------------------------
--                                                                          --
--            Copyright (C) 2001-2015 Free Software Foundation              --
--                                                                          --
-- This is free software;  you can  redistribute it  and/or modify it under --
-- terms of the  GNU General Public License as published  by the Free Soft- --
-- ware  Foundation;  either version 2,  or (at your option) any later ver- --
-- sion.  This is distributed in the hope that it will be useful, but WITH- --
-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --
-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --
-- for  more details.  You should have  received  a copy of the GNU General --
-- Public License  distributed with this;  see file COPYING.  If not, write --
-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --
-- MA 02111-1307, USA.                                                      --
--                                                                          --
-- This is maintained at http://www.sparforte.com                           --
--                                                                          --
------------------------------------------------------------------------------
pragma ada_2005;

with text_io;use text_io;

with
    Interfaces.C,
    ada.exceptions,
    gnat.directory_operations,
    world,
    scanner,
    scanner_res,
    string_util,
    parser,
    parser_aux,
    parser_params;

#if BDB
with
    bdb,
    bdb_constants;
#end if;

use
    ada.exceptions,
    gnat.directory_operations,
    world,
    scanner,
    scanner_res,
    string_util,
    parser,
    parser_aux,
    parser_params;

#if BDB
use
    bdb,
    bdb_constants;
#end if;

package body parser_btree_io is

------------------------------------------------------------------------------
-- Utility subprograms
------------------------------------------------------------------------------

procedure CheckFileIsInitialized( fileId : identifier ) is
begin
  if identifiers( fileId ).genKind = eof_t then
     err( "new_file has not been called to initialize the file" );
  end if;
end CheckFileIsInitialized;

procedure ParseSingleFileParameter( fileId : out identifier ) is
begin
  ParseSingleInOutParameter( fileId, btree_file_t );
  CheckFileIsInitialized( fileId );
end ParseSingleFileParameter;

procedure ParseFirstFileParameter( fileId : out identifier ) is
begin
  ParseFirstInOutParameter( fileId, btree_file_t );
  CheckFileIsInitialized( fileId );
end ParseFirstFileParameter;

procedure ParseNextFileParameter( fileId : out identifier ) is
begin
  ParseNextInOutParameter( fileId, btree_file_t );
  CheckFileIsInitialized( fileId );
end ParseNextFileParameter;

procedure ParseLastFileParameter( fileId : out identifier ) is
begin
  ParseLastInOutParameter( fileId, btree_file_t );
  CheckFileIsInitialized( fileId );
end ParseLastFileParameter;

procedure CheckCursorIsInitialized( cursId : identifier ) is
begin
  if identifiers( cursId ).genKind = eof_t then
     err( "new_cursor has not been called to initialize the cursor" );
  end if;
end CheckCursorIsInitialized;

procedure ParseSingleCursorParameter( cursId : out identifier ) is
begin
  ParseSingleInOutParameter( cursId, btree_cursor_t );
  CheckCursorIsInitialized( cursId );
end ParseSingleCursorParameter;

procedure ParseFirstCursorParameter( cursId : out identifier ) is
begin
  ParseFirstInOutParameter( cursId, btree_cursor_t );
  CheckCursorIsInitialized( cursId );
end ParseFirstCursorParameter;

procedure ParseNextCursorParameter( cursId : out identifier ) is
begin
  ParseNextInOutParameter( cursId, btree_cursor_t );
  CheckCursorIsInitialized( cursId );
end ParseNextCursorParameter;

procedure ParseLastCursorParameter( cursId : out identifier ) is
begin
  ParseLastInOutParameter( cursId, btree_cursor_t );
  CheckCursorIsInitialized( cursId );
end ParseLastCursorParameter;


------------------------------------------------------------------------------
-- Parser subprograms
------------------------------------------------------------------------------

#if BDB

procedure ParseBTreeNewFile is
  -- Syntax: btree.new_file( f, t );
  -- Ada:    N/A
  resId : resHandleId;
  ref : reference;
  genKindId : identifier;
begin
  expect( btree_new_file_t );
  ParseFirstOutParameter( ref, btree_file_t );
  baseTypesOK( ref.kind, btree_file_t );
  expect( symbol_t, "," );
  ParseIdentifier( genKindId );
  if class_ok( genKindId, typeClass, subClass ) then
     if identifiers( genKindId ).list then
        err( "element type should be a scalar type" );
     elsif identifiers( getBaseType( genKindId ) ).kind = root_record_t then
        err( "element type should be a scalar type" );
     end if;
  end if;
  identifiers( ref.id ).genKind := genKindId;
  expect( symbol_t, ")" );
  if isExecutingCommand then
     identifiers( ref.id ).resource := true;
     declareResource( resId, btree_file, blocks_top );
     AssignParameter( ref, to_unbounded_string( resId ) );
  end if;
end ParseBtreeNewFile;

#else

pragma warnings( off );
-- Hide unused parameters warnings

procedure ParseBtreeNewFile is
begin
  err( "bdb support not configured" );
end ParseBtreeNewFile;

#end if;
#if BDB

procedure ParseBTreeClear is
  -- Syntax: btree.clear( f );
  -- Ada:    N/A;
  fileId   : identifier;
  theFile  : resPtr;
begin
  expect( btree_clear_t );
  ParseSingleFileParameter( fileId );
  if isExecutingCommand then
     begin
       -- close the file / environment, if they are still open.  This doesn't
       -- close any cursors.
       findResource( to_resource_id( identifiers( fileId ).value ), theFile );
       if theFile.btree.isOpen then
          Close( theFile.btree.session );
          Close( theFile.btree.env );
          theFile.btree.isOpen := false;
       end if;
     exception when msg: berkeley_error =>
       err( exception_message( msg ) );
     end;
  end if;
end ParseBTreeClear;

#else

procedure ParseBTreeClear is
begin
  err( "bdb support not configured" );
end ParseBTreeClear;

#end if;
#if BDB

procedure ParseBTreeCreate is
  -- Syntax: btree.create( f, path, keyLen, valLen );
  -- Ada:    btree.create( f, path, keyLen, valLen );
  fileId     : identifier;
  theFile    : resPtr;
  fname_val  : unbounded_string;
  fname_type : identifier;
  keyLen     : interfaces.C.size_t;
  keyLenExpr : unbounded_string;
  keyLenType : identifier;
  valLen     : interfaces.C.size_t;
  valLenExpr : unbounded_string;
  valLenType : identifier;
begin
  expect( btree_create_t );
  -- NOTE: normally this is an out parameter but it is a resource so it
  -- must be initialized separately.
  ParseFirstFileParameter( fileId );
  ParseNextStringParameter( fname_val, fname_type, string_t );
  ParseNextNumericParameter( keyLenExpr, keyLenType, positive_t );
  ParseLastNumericParameter( valLenExpr, valLenType, positive_t );
  if isExecutingCommand then
     begin
        keyLen := Interfaces.C.size_t'value( to_string( keyLenExpr ) );
     exception when others =>
        err( "key length must be" & Interfaces.C.size_t'first'img & ".." & Interfaces.C.size_t'last'img );
     end;
     begin
        valLen := Interfaces.C.size_t'value( to_string( valLenExpr ) );
     exception when others =>
        err( "value length must be" & Interfaces.C.size_t'first'img & ".." & Interfaces.C.size_t'last'img );
     end;

     declare
        filename : string := base_name( to_string( fname_val ) );
        dirname  : string := dir_name( to_string( fname_val ) );
        dirname2 : unbounded_string;
        pwdId : identifier;
     begin
        findResource( to_resource_id( identifiers( fileId ).value ), theFile );

        init( theFile.btree.env );

        -- berkeley db paths must be absolute paths when creating (opening
        -- an exisiting data file is OK for relative paths)

        dirname2 := to_unbounded_string( dirname );
        if dirname = "." then
           dirname2 := null_unbounded_string;
        elsif element( dirname2, 1 ) /= '/' then
           findIdent( to_unbounded_string( "PWD" ), pwdId );
           dirname2 := identifiers( pwdId ).value & "/" & dirname;
        end if;

        -- Berkeley puts the files in the current directory, though you can
        -- move the env because it is shared.  To put the project in a specific
        -- directory, you have you configure it.  A sophisiticated setup would
        -- place all of these in different directories.
        --
        -- For our purposes (simple files), keep everything in one directory

        if length( dirname2 ) > 0 then
           begin
              set_data_dir( theFile.btree.env, to_string( dirname2 ) );
           exception when msg: berkeley_error =>
              err( exception_message( msg ) & " on setting the data directory" );
           end;
           begin
              set_tmp_dir( theFile.btree.env, to_string( dirname2 ) );
           exception when msg: berkeley_error =>
              err( exception_message( msg ) & " on setting the temp directory"  );
           end;
           begin
              set_lg_dir( theFile.btree.env, to_string( dirname2 ) );
           exception when msg: berkeley_error =>
              err( exception_message( msg ) & " on setting the logging directory"  );
           end;
        end if;

        -- Create an environment

        begin
           create( theFile.btree.env,
                to_string( dirname2 ),
                -- I assume we don't need logging or transactions but
                -- they could be implemented.
                DB_E_OPEN_INIT_LOCK OR
                DB_E_OPEN_INIT_MPOOL,
                0 );
           theFile.btree.envhome := dirname2;
           exception when msg: berkeley_error =>
              err( exception_message( msg ) & " on creating the environment" );
           end;

        -- Create the file
        new_berkeley_session(
           theFile.btree.session,
           theFile.btree.env,
           keyLen,
           valLen );
        begin
           create( theFile.btree.session, filename, "", DB_BTREE, 0, 0 );
        exception when msg: berkeley_error =>
           err( exception_message( msg ) & " on creating the data file"  );
        end;
        theFile.btree.isOpen := true;
        theFile.btree.name := fname_val;
     --exception when berkeley_error:s =>
     --   err( to_string( last_error( theFile.btree.session ) );
     end;
  end if;
end ParseBTreeCreate;

#else

procedure ParseBTreeCreate is
begin
  err( "bdb support not configured" );
end ParseBTreeCreate;

#end if;
#if BDB

procedure ParseBTreeClose is
  -- Syntax: btree.create( f );
  -- Ada:    btree.create( f );
  fileId     : identifier;
  theFile    : resPtr;
begin
  expect( btree_close_t );
  ParseSingleFileParameter( fileId );
  if isExecutingCommand then
     begin
        findResource( to_resource_id( identifiers( fileId ).value ), theFile );
        close( theFile.btree.session );
        close( theFile.btree.env );
        theFile.btree.isOpen := false;
      exception when msg: berkeley_error =>
        err( exception_message( msg ) );
     end;
  end if;
end ParseBTreeClose;

#else

procedure ParseBTreeClose is
begin
  err( "bdb support not configured" );
end ParseBTreeClose;

#end if;
#if BDB

procedure ParseBTreeOpen is
  -- Syntax: btree.open( f, path, keyLen, valLen );
  -- Ada:    btree.open( f, path, keyLen, valLen );
  fileId     : identifier;
  theFile    : resPtr;
  fname_val  : unbounded_string;
  fname_type : identifier;
  keyLen     : interfaces.C.size_t;
  keyLenExpr : unbounded_string;
  keyLenType : identifier;
  valLen     : interfaces.C.size_t;
  valLenExpr : unbounded_string;
  valLenType : identifier;
begin
  expect( btree_open_t );
  -- NOTE: normally this is an out parameter but it is a resource so it
  -- must be initialized separately.
  ParseFirstFileParameter( fileId );
  ParseNextStringParameter( fname_val, fname_type, string_t );
  -- TODO: can this be dynamic?
  ParseNextNumericParameter( keyLenExpr, keyLenType, positive_t );
  ParseLastNumericParameter( valLenExpr, valLenType, positive_t );
  if isExecutingCommand then
     begin
        keyLen := Interfaces.C.size_t'value( to_string( keyLenExpr ) );
     exception when others =>
        err( "key length must be" & Interfaces.C.size_t'first'img & ".." & Interfaces.C.size_t'last'img );
     end;
     begin
        valLen := Interfaces.C.size_t'value( to_string( valLenExpr ) );
     exception when others =>
        err( "value length must be" & Interfaces.C.size_t'first'img & ".." & Interfaces.C.size_t'last'img );
     end;

     declare
        filename : string := base_name( to_string( fname_val ) );
        dirname  : string := dir_name( to_string( fname_val ) );
        dirname2 : unbounded_string;
        pwdId : identifier;
     begin
        -- TODO: pathname handling
        findResource( to_resource_id( identifiers( fileId ).value ), theFile );

        -- Create an environment
        init( theFile.btree.env );

        -- berkeley db paths must be absolute paths when creating (opening
        -- an exisiting data file is OK for relative paths).  We're doing this
        -- here to be consistent with create but it shouldn't be necessary

        dirname2 := to_unbounded_string( dirname );
        if dirname = "." then
           dirname2 := null_unbounded_string;
        elsif element( dirname2, 1 ) /= '/' then
           findIdent( to_unbounded_string( "PWD" ), pwdId );
           dirname2 := identifiers( pwdId ).value & "/" & dirname;
        end if;

        -- Berkeley puts the files in the current directory, though you can
        -- move the env because it is shared.  To put the project in a specific
        -- directory, you have you configure it.  A sophisiticated setup would
        -- place all of these in different directories.
        --
        -- For our purposes (simple files), keep everything in one directory

        if length( dirname2 ) > 0 then
           begin
              set_data_dir( theFile.btree.env, to_string( dirname2 ) );
           exception when msg: berkeley_error =>
              err( exception_message( msg ) & " on setting the data directory" );
           end;
           begin
              set_tmp_dir( theFile.btree.env, to_string( dirname2 ) );
           exception when msg: berkeley_error =>
              err( exception_message( msg ) & " on setting the temp directory"  );
           end;
           begin
              set_lg_dir( theFile.btree.env, to_string( dirname2 ) );
           exception when msg: berkeley_error =>
              err( exception_message( msg ) & " on setting the logging directory"  );
           end;
        end if;

        begin
           open( theFile.btree.env,
                to_string( dirname2 ),
                -- I assume we don't need logging or transactions but
                -- they could be implemented.
                DB_E_OPEN_INIT_LOCK OR
                DB_E_OPEN_INIT_MPOOL,
                0 );
           theFile.btree.envhome := dirname2;
           exception when msg: berkeley_error =>
              err( exception_message( msg ) & " on opening the environment" );
           end;

        -- Create the file
        new_berkeley_session(
           theFile.btree.session,
           theFile.btree.env,
           keyLen,
           valLen );

        begin
           open( theFile.btree.session, filename, "", DB_BTREE, 0, 0 );
        exception when msg: berkeley_error =>
           err( exception_message( msg ) & " on opening the data file"  );
        end;
        theFile.btree.isOpen := true;
        theFile.btree.name := fname_val;
     end;
  end if;
end ParseBTreeOpen;

#else

procedure ParseBTreeOpen is
begin
  err( "bdb support not configured" );
end ParseBTreeOpen;

#end if;
#if BDB

procedure ParseBTreeIsOpen( result : out unbounded_string; kind : out identifier ) is
  -- Syntax: b := btree.is_open( f );
  -- Ada:    N/A
  fileId     : identifier;
  theFile    : resPtr;
begin
  kind := boolean_t;
  expect( btree_is_open_t );
  ParseSingleFileParameter( fileId );
  if isExecutingCommand then
     begin
        findResource( to_resource_id( identifiers( fileId ).value ), theFile );
        result := to_bush_boolean( theFile.btree.isOpen );
     exception when berkeley_error =>
        result := to_bush_boolean( false );
     end;
  end if;
end ParseBTreeIsOpen;

#else

procedure ParseBTreeIsOpen( result : out unbounded_string; kind : out identifier ) is
begin
  err( "bdb support not configured" );
end ParseBTreeIsOpen;

#end if;
#if BDB

procedure ParseBTreeName( result : out unbounded_string; kind : out identifier ) is
  -- Syntax: b := btree.name( f );
  -- Ada:    N/A
  fileId     : identifier;
  theFile    : resPtr;
begin
  kind := string_t;
  expect( btree_name_t );
  ParseSingleFileParameter( fileId );
  if isExecutingCommand then
     begin
        findResource( to_resource_id( identifiers( fileId ).value ), theFile );
        result := theFile.btree.name;
     end;
  end if;
end ParseBTreeName;

#else

procedure ParseBTreeName( result : out unbounded_string; kind : out identifier ) is
begin
  err( "bdb support not configured" );
end ParseBTreeName;

#end if;
#if BDB

procedure ParseBTreeDelete is
  -- Syntax: btree.delete( f );
  -- Ada:    bdb.remove( f );
  -- TODO:   keep environment
  fileId     : identifier;
  theFile    : resPtr;
begin
  expect( btree_delete_t );
  ParseSingleFileParameter( fileId );
  if isExecutingCommand then
     begin
        findResource( to_resource_id( identifiers( fileId ).value ), theFile );
        if theFile.btree.isOpen then
           begin
              close( theFile.btree.session );
           exception when msg: berkeley_error =>
              err( exception_message( msg ) & " on closing the data file"  );
           end;
        end if;

        begin
           dbremove( theFile.btree.env,
             to_string( theFile.btree.name ),
             "",
             0 );
        exception when msg: berkeley_error =>
            err( exception_message( msg ) & " on removing the data file"  );
        end;

        -- keep the environment
        if theFile.btree.isOpen then
           begin
              close( theFile.btree.env );
           exception when msg: berkeley_error =>
              err( exception_message( msg ) & " on closing the environment"  );
           end;
          -- remove( theFile.btree.env, dbhome )
        end if;

        begin
           init( theFile.btree.env );
           remove( theFile.btree.env, to_string( theFile.btree.envhome ) );
        exception when msg: berkeley_error =>
           err( exception_message( msg ) & " on removing the environment"  );
        end;
        theFile.btree.isOpen := false;
     exception when storage_error =>
        err( "storage_error raised" );
     when constraint_error =>
        err( "constraint_error raised" );
     when others =>
        err( "exception raised" );
     end;
  end if;
end ParseBTreeDelete;

#else

procedure ParseBTreeDelete is
begin
  err( "bdb support not configured" );
end ParseBTreeDelete;

#end if;
#if BDB

procedure ParseBTreeSet is
  -- Syntax: btree.set( f, key, value );
  -- Ada:    bdb.put( f, key, value );
  fileId     : identifier;
  theFile    : resPtr;
  keyExpr    : unbounded_string;
  keyType    : identifier;
  valExpr    : unbounded_string;
  valType    : identifier;
begin
  expect( btree_set_t );
  ParseFirstFileParameter( fileId );
  ParseNextStringParameter( keyExpr, keyType, string_t );
  ParseLastGenItemParameter( valExpr, valType, identifiers( fileId ).genKind );
  if isExecutingCommand then
     begin
        findResource( to_resource_id( identifiers( fileId ).value ), theFile );
        put( theFile.btree.session, to_string( keyExpr ), to_string( valExpr ) );
     exception when msg: berkeley_error =>
        err( exception_message( msg ) );
     end;
  end if;
end ParseBTreeSet;

#else

procedure ParseBTreeSet is
begin
  err( "bdb support not configured" );
end ParseBTreeSet;

#end if;
#if BDB

procedure ParseBTreeGet( result : out unbounded_string; kind : out identifier ) is
  -- Syntax: v := btree.get( f, k );
  -- Ada:    bdb.get( f, k );
  fileId     : identifier;
  theFile    : resPtr;
  keyExpr    : unbounded_string;
  keyType    : identifier;
begin
  -- TODO: null string instead of exception to parallel dht
  expect( btree_get_t );
  ParseFirstFileParameter( fileId );
  ParseLastStringParameter( keyExpr, keyType, string_t );
  kind := identifiers( fileId ).genKind;
  if isExecutingCommand then
     begin
        findResource( to_resource_id( identifiers( fileId ).value ), theFile );
        get( theFile.btree.session, to_string( keyExpr ), result );
     exception when msg: berkeley_error =>
        if last_error( theFile.btree.session ) = DB_NOTFOUND then
           err( "key not found" );
        else
            err( exception_message( msg ) );
        end if;
     end;
  end if;
end ParseBTreeGet;

#else

procedure ParseBTreeGet( result : out unbounded_string; kind : out identifier ) is
begin
  err( "bdb support not configured" );
end ParseBTreeGet;

#end if;
#if BDB

procedure ParseBTreeHasElement( result : out unbounded_string; kind : out identifier ) is
  -- Syntax: v := btree.has_element( f, k );
  -- Ada:    bdb.exists( f, k );
  fileId     : identifier;
  theFile    : resPtr;
  keyExpr    : unbounded_string;
  keyType    : identifier;
begin
  kind := boolean_t;
  expect( btree_has_element_t );
  ParseFirstFileParameter( fileId );
  ParseLastStringParameter( keyExpr, keyType, string_t );
  if isExecutingCommand then
     begin
        findResource( to_resource_id( identifiers( fileId ).value ), theFile );
        exists( theFile.btree.session, to_string( keyExpr ) );
        result := to_bush_boolean( true );
     exception when berkeley_error =>
        result := to_bush_boolean( false );
     end;
  end if;
end ParseBTreeHasElement;

#else

procedure ParseBTreeHasElement( result : out unbounded_string; kind : out identifier ) is
begin
  err( "bdb support not configured" );
end ParseBTreeHasElement;

#end if;
#if BDB

procedure ParseBTreeRemove is
  -- Syntax: v := btree.remove( f, k | c );
  -- Ada:    bdb.delete( f, k | c );
  fileId     : identifier;
  theFile    : resPtr;
  cursId     : identifier;
  theCurs    : resPtr;
  keyExpr    : unbounded_string;
  keyType    : identifier;
begin
  expect( btree_remove_t );
  ParseFirstFileParameter( fileId );
  expect( symbol_t, "," );
  if getbaseType( identifiers( token ).kind ) = btree_cursor_t then
     ParseIdentifier( cursId );
     genTypesOk( identifiers( fileId ).genKind, identifiers( cursId ).genKind );
  else
     ParseExpression( keyExpr, keyType );
     baseTypesOk( keyType, uni_string_t );
  end if;
  expect( symbol_t, ")" );
  if isExecutingCommand then
     findResource( to_resource_id( identifiers( fileId ).value ), theFile );
     if cursId /= eof_t then
        begin
          findResource( to_resource_id( identifiers( cursId ).value ), theCurs );
          delete( theFile.btree.session, theCurs.btree_cur );
        exception when msg: berkeley_error =>
            err( exception_message( msg ) );
        end;
     else
        begin
           delete( theFile.btree.session, to_string( keyExpr ) );
        exception when msg: berkeley_error =>
           if last_error( theFile.btree.session ) = DB_NOTFOUND then
              err( "key not found" );
           else
              err( exception_message( msg ) );
           end if;
        end;
     end if;
  end if;
end ParseBTreeRemove;

#else

procedure ParseBTreeRemove is
begin
  err( "bdb support not configured" );
end ParseBTreeRemove;

#end if;
#if BDB

procedure ParseBtreeIncrement is
  -- Syntax: btree.increment( f, s [,n] );
  -- Ada:    N/A
  fileId     : identifier;
  theFile    : resPtr;
  keyExpr  : unbounded_string;
  keyType  : identifier;
  amtExpr  : unbounded_string;
  amtType  : identifier;
  hasAmt   : boolean := false;
  oldItem  : unbounded_string;
  oldItemValue : long_float;
begin
  expect( btree_increment_t );
  ParseFirstFileParameter( fileId );
  if getUniType( identifiers( fileId ).genKind ) /= uni_numeric_t then
     err( "increment requires a numeric item type" );
  end if;
  ParseNextStringParameter( keyExpr, keyType, uni_string_t );
  if token = symbol_t and identifiers( token ).value = "," then
     hasAmt := true;
     ParseLastNumericParameter( amtExpr, amtType, natural_t );
  elsif token = symbol_t and identifiers( token ).value = ")" then
     expect( symbol_t, ")" );
  else
     err( ", or ) expected" );
  end if;
  if isExecutingCommand then
     begin
       findResource( to_resource_id( identifiers( fileId ).value ), theFile );

       get( theFile.btree.session, to_string( keyExpr ), oldItem );
       -- berkeley throws exception on not found
       --if oldItem /= null_unbounded_string then
          oldItemValue := to_numeric( oldItem );
          if hasAmt then
             put( theFile.btree.session, to_string( keyExpr ),  to_string( to_unbounded_string( oldItemValue + long_float( natural( to_numeric( amtExpr ) ) ) ) ) );
          else
             put( theFile.btree.session, to_string( keyExpr ), to_string( to_unbounded_string( oldItemValue + 1.0 ) ) );
          end if;
       --end if;
     exception when storage_error =>
       err( "storage error raised" );
     when constraint_error =>
       err( "constraint error raised" );
     when msg: berkeley_error =>
       if last_error( theFile.btree.session ) = DB_NOTFOUND then
          err( "key not found" );
       else
          err( exception_message( msg ) );
       end if;
     end;
  end if;
end ParseBTreeIncrement;

#else

procedure ParseBTreeIncrement is
begin
  err( "bdb support not configured" );
end ParseBTreeIncrement;

#end if;
#if BDB

procedure ParseBtreeDecrement is
  -- Syntax: btree.decrement( f, s [,n] );
  -- Ada:    N/A
  fileId     : identifier;
  theFile    : resPtr;
  keyExpr  : unbounded_string;
  keyType  : identifier;
  amtExpr  : unbounded_string;
  amtType  : identifier;
  hasAmt   : boolean := false;
  oldItem  : unbounded_string;
  oldItemValue : long_float;
begin
  expect( btree_decrement_t );
  ParseFirstFileParameter( fileId );
  if getUniType( identifiers( fileId ).genKind ) /= uni_numeric_t then
     err( "increment requires a numeric item type" );
  end if;
  ParseNextStringParameter( keyExpr, keyType, uni_string_t );
  if token = symbol_t and identifiers( token ).value = "," then
     hasAmt := true;
     ParseLastNumericParameter( amtExpr, amtType, natural_t );
  elsif token = symbol_t and identifiers( token ).value = ")" then
     expect( symbol_t, ")" );
  else
     err( ", or ) expected" );
  end if;
  if isExecutingCommand then
     begin
       findResource( to_resource_id( identifiers( fileId ).value ), theFile );

       get( theFile.btree.session, to_string( keyExpr ), oldItem );
       -- berkeley throws exception on not found
       --if oldItem /= null_unbounded_string then
          oldItemValue := to_numeric( oldItem );
          if hasAmt then
             put( theFile.btree.session, to_string( keyExpr ),  to_string( to_unbounded_string( oldItemValue - long_float( natural( to_numeric( amtExpr ) ) ) ) ) );
          else
             put( theFile.btree.session, to_string( keyExpr ), to_string( to_unbounded_string( oldItemValue - 1.0 ) ) );
          end if;
       --end if;
     exception when storage_error =>
       err( "storage error raised" );
     when constraint_error =>
       err( "constraint error raised" );
     when msg: berkeley_error =>
       if last_error( theFile.btree.session ) = DB_NOTFOUND then
          err( "key not found" );
       else
          err( exception_message( msg ) );
       end if;
     end;
  end if;
end ParseBTreeDecrement;

#else

procedure ParseBTreeDecrement is
begin
  err( "bdb support not configured" );
end ParseBTreeDecrement;

#end if;
#if BDB

procedure ParseBtreeAdd is
  -- Syntax: btree.add( f, s, e );
  -- Ada:    N/A
  fileId     : identifier;
  theFile  : resPtr;
  keyExpr  : unbounded_string;
  keyType  : identifier;
  itemExpr : unbounded_string;
  itemType : identifier;
begin
  expect( btree_add_t );
  ParseFirstFileParameter( fileId );
  ParseNextStringParameter( keyExpr, keyType, uni_string_t );
  ParseLastGenItemParameter( itemExpr, itemType, identifiers( fileId ).genKind );
  if isExecutingCommand then
     begin
       findResource( to_resource_id( identifiers( fileId ).value ), theFile );
       exists( theFile.btree.session, to_string( keyExpr ) );
     exception when storage_error =>
       err( "storage error raised" );
     when msg: berkeley_error =>
       if last_error( theFile.btree.session ) = DB_NOTFOUND then
          put( theFile.btree.session, to_string( keyExpr ), to_string( itemExpr ) );
       else
          err( exception_message( msg ) );
       end if;
     end;
  end if;
end ParseBTreeAdd;

#else

procedure ParseBTreeAdd is
begin
  err( "bdb support not configured" );
end ParseBTreeAdd;

#end if;
#if BDB

procedure ParseBtreeReplace is
  -- Syntax: btree.replace( f, c | k, v );
  -- Ada:    N/A
  -- Note: the key will not be overwritten if a cursor is used
  fileId     : identifier;
  theFile  : resPtr;
  keyExpr  : unbounded_string;
  keyType  : identifier;
  itemExpr : unbounded_string;
  itemType : identifier;
  cursId   : identifier := eof_t;
  theCurs  : resPtr;
begin
  expect( btree_replace_t );
  ParseFirstFileParameter( fileId );
  expect( symbol_t, "," );
  if getbaseType( identifiers( token ).kind ) = btree_cursor_t then
     ParseIdentifier( cursId );
     genTypesOk( identifiers( fileId ).genKind, identifiers( cursId ).genKind );
  else
     ParseExpression( keyExpr, keyType );
     baseTypesOk( keyType, uni_string_t );
  end if;
  ParseLastGenItemParameter( itemExpr, itemType, identifiers( fileId ).genKind );
  if isExecutingCommand then
     if cursId /= eof_t then
        -- put where the cursor is
        begin
          findResource( to_resource_id( identifiers( fileId ).value ), theFile );
          findResource( to_resource_id( identifiers( cursId ).value ), theCurs );
          put( theFile.btree.session,
               theCurs.btree_cur,
               keyExpr, -- this is ignored
               itemExpr,
               DB_C_PUT_CURRENT );
        exception when msg: berkeley_error =>
          err( exception_message( msg ) );
        end;
     else
       -- put, but only if the target exists
       begin
         findResource( to_resource_id( identifiers( fileId ).value ), theFile );
         exists( theFile.btree.session, to_string( keyExpr ) );
         put( theFile.btree.session, to_string( keyExpr ), to_string( itemExpr ) );
       exception when storage_error =>
         err( "storage error raised" );
       when msg: berkeley_error =>
          if last_error( theFile.btree.session ) /= DB_NOTFOUND then
             err( exception_message( msg ) );
          end if;
       end;
     end if;
  end if;
end ParseBTreeReplace;

#else

procedure ParseBTreeReplace is
begin
  err( "bdb support not configured" );
end ParseBTreeReplace;

#end if;
#if BDB

procedure ParseBtreeAppend is
  -- Syntax: btree.append( f, s, e );
  -- Ada:    N/A
  fileId     : identifier;
  theFile  : resPtr;
  keyExpr  : unbounded_string;
  keyType  : identifier;
  itemExpr : unbounded_string;
  itemType : identifier;
  oldItem  : unbounded_string;
begin
  expect( btree_append_t );
  ParseFirstFileParameter( fileId );
  if getUniType( identifiers( fileId ).genKind ) /= uni_string_t then
     err( "append requires a string item type" );
  end if;
  ParseNextStringParameter( keyExpr, keyType, uni_string_t );
  ParseLastGenItemParameter( itemExpr, itemType, identifiers( fileId ).genKind );
  if isExecutingCommand then
     begin
       findResource( to_resource_id( identifiers( fileId ).value ), theFile );
       get( theFile.btree.session, to_string( keyExpr ), oldItem );
       put( theFile.btree.session, to_string( keyExpr ), to_string( oldItem & itemExpr ) );
     exception when storage_error =>
       err( "storage error raised" );
     when msg: berkeley_error =>
       if last_error( theFile.btree.session ) /= DB_NOTFOUND then
           err( exception_message( msg ) );
       end if;
     end;
  end if;
end ParseBTreeAppend;

#else

procedure ParseBTreeAppend is
begin
  err( "bdb support not configured" );
end ParseBTreeAppend;

#end if;
#if BDB

procedure ParseBtreePrepend is
  -- Syntax: btree.prepend( f, s, e );
  -- Ada:    N/A
  fileId     : identifier;
  theFile  : resPtr;
  keyExpr  : unbounded_string;
  keyType  : identifier;
  itemExpr : unbounded_string;
  itemType : identifier;
  oldItem  : unbounded_string;
begin
  expect( btree_prepend_t );
  ParseFirstFileParameter( fileId );
  if getUniType( identifiers( fileId ).genKind ) /= uni_string_t then
     err( "append requires a string item type" );
  end if;
  ParseNextStringParameter( keyExpr, keyType, uni_string_t );
  ParseLastGenItemParameter( itemExpr, itemType, identifiers( fileId ).genKind );
  if isExecutingCommand then
     begin
       findResource( to_resource_id( identifiers( fileId ).value ), theFile );
       get( theFile.btree.session, to_string( keyExpr ), oldItem );
       put( theFile.btree.session, to_string( keyExpr ), to_string( itemExpr & oldItem ) );
     exception when storage_error =>
       err( "storage error raised" );
     when msg: berkeley_error =>
       if last_error( theFile.btree.session ) /= DB_NOTFOUND then
           err( exception_message( msg ) );
       end if;
     end;
  end if;
end ParseBTreePrepend;

#else

procedure ParseBTreePrepend is
begin
  err( "bdb support not configured" );
end ParseBTreePrepend;

#end if;
#if BDB

procedure ParseBTreeFlush is
  -- Syntax: btree.flush( f, flags );
  -- Ada:    bbd.sync( f );
  fileId     : identifier;
  theFile    : resPtr;
begin
  expect( btree_flush_t );
  ParseSingleFileParameter( fileId );
  if isExecutingCommand then
     begin
        findResource( to_resource_id( identifiers( fileId ).value ), theFile );
        sync( theFile.btree.session );
     exception when msg: berkeley_error =>
        err( exception_message( msg ) );
     end;
  end if;
end ParseBTreeFlush;

#else

procedure ParseBTreeFlush is
begin
  err( "bdb support not configured" );
end ParseBTreeFlush;

#end if;
#if BDB

procedure ParseBTreeNewCursor is
  -- Syntax: btree.new_cursor( f, t );
  -- Ada:    N/A
  resId : resHandleId;
  ref : reference;
  genKindId : identifier;
begin
  expect( btree_new_cursor_t );
  ParseFirstOutParameter( ref, btree_cursor_t );
  baseTypesOK( ref.kind, btree_cursor_t );
  expect( symbol_t, "," );
  ParseIdentifier( genKindId );
  if class_ok( genKindId, typeClass, subClass ) then
     if identifiers( genKindId ).list then
        err( "element type should be a scalar type" );
     elsif identifiers( getBaseType( genKindId ) ).kind = root_record_t then
        err( "element type should be a scalar type" );
     end if;
  end if;
  identifiers( ref.id ).genKind := genKindId;
  expect( symbol_t, ")" );
  if isExecutingCommand then
     identifiers( ref.id ).resource := true;
     declareResource( resId, btree_cursor, blocks_top );
     AssignParameter( ref, to_unbounded_string( resId ) );
  end if;
end ParseBtreeNewCursor;

#else

procedure ParseBtreeNewCursor is
begin
  err( "bdb support not configured" );
end ParseBtreeNewCursor;

#end if;
#if BDB

procedure ParseBTreeOpenCursor is
  -- Syntax: btree_io.open_cursor( f, c );
  -- Ada:    N/A
  fileId     : identifier;
  theFile    : resPtr;
  cursId     : identifier;
  theCurs    : resPtr;
begin
-- TODO: fold into btree.open
  expect( btree_open_cursor_t );
  ParseFirstFileParameter( fileId );
  ParseLastCursorParameter( cursId );
  if isExecutingCommand then
     findResource( to_resource_id( identifiers( fileId ).value ), theFile );
     findResource( to_resource_id( identifiers( cursId ).value ), theCurs );
     new_berkeley_cursor( theFile.btree.session, theCurs.btree_cur );
  end if;
end ParseBtreeOpenCursor;

#else

procedure ParseBTreeOpenCursor is
begin
  err( "bdb support not configured" );
end ParseBTreeOpenCursor;

#end if;
#if BDB

procedure ParseBTreeCloseCursor is
  -- Syntax: btree_io.close_cursor( fc );
  -- Ada:    bdb.close( f );
  fileId     : identifier;
  theFile    : resPtr;
  cursId     : identifier;
  theCurs    : resPtr;
begin
  expect( btree_close_cursor_t );
  ParseFirstFileParameter( fileId );
  ParseLastCursorParameter( cursId );
  if isExecutingCommand then
     begin
        findResource( to_resource_id( identifiers( fileId ).value ), theFile );
        findResource( to_resource_id( identifiers( cursId ).value ), theCurs );
        close( theFile.btree.session, theCurs.btree_cur );
     exception when msg: berkeley_error =>
        err( exception_message( msg ) );
     end;
  end if;
end ParseBTreeCloseCursor;

#else

procedure ParseBTreeCloseCursor is
begin
  err( "bdb support not configured" );
end ParseBTreeCloseCursor;

#end if;
#if BDB

procedure ParseBTreeFirst is
  -- Syntax: btree_io.first( f, c, k, v );
  -- Ada:    bdb.get( f );
  -- Note: Unlike Ada lists, Berkeley will also return the element when
  -- positioning the cursor.
  fileId     : identifier;
  theFile    : resPtr;
  cursId     : identifier;
  theCurs    : resPtr;
  keyRef     : reference;
  valRef     : reference;
begin
  expect( btree_first_t );
  ParseFirstFileParameter( fileId );
  ParseNextCursorParameter( cursId );
  genTypesOk( identifiers( fileId ).genKind, identifiers( cursId ).genKind );
  ParseNextOutParameter( keyRef, string_t );
  baseTypesOK( keyRef.kind, string_t );
  ParseLastOutParameter( valRef, identifiers( fileId ).genKind );
  baseTypesOK( valRef.kind, identifiers( fileId ).genKind  );
  if isExecutingCommand then
     declare
        key : unbounded_string;
        data : unbounded_string;
     begin
        findResource( to_resource_id( identifiers( fileId ).value ), theFile );
        findResource( to_resource_id( identifiers( cursId ).value ), theCurs );
        get( theFile.btree.session,
             theCurs.btree_cur,
             key,
             data,
             DB_C_GET_FIRST );
        AssignParameter( keyRef, key );
        AssignParameter( valRef, data );
     exception when msg: berkeley_error =>
         -- TODO: differentiate between key not found and other errors here
         err( "key not found" );
         -- err( exception_message( msg ) );
     end;
  end if;
end ParseBTreeFirst;

#else

procedure ParseBTreeFirst is
begin
  err( "bdb support not configured" );
end ParseBTreeFirst;

#end if;
#if BDB

procedure ParseBTreeNext is
  -- Syntax: btree_io.next( f, c, k, v );
  -- Ada:    bdb.get( f );
  -- Note: Unlike Ada lists, Berkeley will also return the element when
  -- positioning the cursor.
  fileId     : identifier;
  theFile    : resPtr;
  cursId     : identifier;
  theCurs    : resPtr;
  keyRef     : reference;
  valRef     : reference;
begin
  expect( btree_next_t );
  ParseFirstFileParameter( fileId );
  ParseNextCursorParameter( cursId );
  genTypesOk( identifiers( fileId ).genKind, identifiers( cursId ).genKind );
  ParseNextOutParameter( keyRef, string_t );
  baseTypesOK( keyRef.kind, string_t );
  ParseLastOutParameter( valRef, identifiers( fileId ).genKind );
  baseTypesOK( valRef.kind, identifiers( fileId ).genKind  );
  if isExecutingCommand then
     declare
        key : unbounded_string;
        data : unbounded_string;
     begin
        findResource( to_resource_id( identifiers( fileId ).value ), theFile );
        findResource( to_resource_id( identifiers( cursId ).value ), theCurs );
        get( theFile.btree.session,
             theCurs.btree_cur,
             key,
             data,
             DB_C_GET_NEXT );
        AssignParameter( keyRef, key );
        AssignParameter( valRef, data );
     exception when msg: berkeley_error =>
         -- TODO: differentiate between key not found and other errors here
         err( "key not found" );
         -- err( exception_message( msg ) );
     end;
  end if;
end ParseBTreeNext;

#else

procedure ParseBTreeNext is
begin
  err( "bdb support not configured" );
end ParseBTreeNext;

#end if;
#if BDB

procedure ParseBTreeLast is
  -- Syntax: btree_io.last( f, c, k, v );
  -- Ada:    bdb.get( f );
  -- Note: Unlike Ada lists, Berkeley will also return the element when
  -- positioning the cursor.
  fileId     : identifier;
  theFile    : resPtr;
  cursId     : identifier;
  theCurs    : resPtr;
  keyRef     : reference;
  valRef     : reference;
begin
  expect( btree_last_t );
  ParseFirstFileParameter( fileId );
  ParseNextCursorParameter( cursId );
  genTypesOk( identifiers( fileId ).genKind, identifiers( cursId ).genKind );
  ParseNextOutParameter( keyRef, string_t );
  baseTypesOK( keyRef.kind, string_t );
  ParseLastOutParameter( valRef, identifiers( fileId ).genKind );
  baseTypesOK( valRef.kind, identifiers( fileId ).genKind  );
  if isExecutingCommand then
     declare
        key : unbounded_string;
        data : unbounded_string;
     begin
        findResource( to_resource_id( identifiers( fileId ).value ), theFile );
        findResource( to_resource_id( identifiers( cursId ).value ), theCurs );
        get( theFile.btree.session,
             theCurs.btree_cur,
             key,
             data,
             DB_C_GET_LAST );
        AssignParameter( keyRef, key );
        AssignParameter( valRef, data );
     exception when msg: berkeley_error =>
         -- TODO: differentiate between key not found and other errors here
         err( "key not found" );
         -- err( exception_message( msg ) );
     end;
  end if;
end ParseBTreeLast;

#else

procedure ParseBTreeLast is
begin
  err( "bdb support not configured" );
end ParseBTreeLast;

#end if;
#if BDB

procedure ParseBTreePrevious is
  -- Syntax: btree_io.previous( f, c, k, v );
  -- Ada:    bdb.get( f );
  -- Note: Unlike Ada lists, Berkeley will also return the element when
  -- positioning the cursor.
  fileId     : identifier;
  theFile    : resPtr;
  cursId     : identifier;
  theCurs    : resPtr;
  keyRef     : reference;
  valRef     : reference;
begin
  expect( btree_previous_t );
  ParseFirstFileParameter( fileId );
  ParseNextCursorParameter( cursId );
  genTypesOk( identifiers( fileId ).genKind, identifiers( cursId ).genKind );
  ParseNextOutParameter( keyRef, string_t );
  baseTypesOK( keyRef.kind, string_t );
  ParseLastOutParameter( valRef, identifiers( fileId ).genKind );
  baseTypesOK( valRef.kind, identifiers( fileId ).genKind  );
  if isExecutingCommand then
     declare
        key : unbounded_string;
        data : unbounded_string;
     begin
        findResource( to_resource_id( identifiers( fileId ).value ), theFile );
        findResource( to_resource_id( identifiers( cursId ).value ), theCurs );
        get( theFile.btree.session,
             theCurs.btree_cur,
             key,
             data,
             DB_C_GET_PREV );
        AssignParameter( keyRef, key );
        AssignParameter( valRef, data );
     exception when msg: berkeley_error =>
         -- TODO: differentiate between key not found and other errors here
         err( "key not found" );
         -- err( exception_message( msg ) );
     end;
  end if;
end ParseBTreePrevious;
#else

procedure ParseBTreePrevious is
begin
  err( "bdb support not configured" );
end ParseBTreePrevious;

#end if;

-----------------------------------------------------------------------------

procedure StartupBTree is
begin
  -- TODO: rename btree_io
  declareNamespace( "btree_io" );

  declareIdent( btree_file_t,   "btree_io.file", positive_t, typeClass );
  declareIdent( btree_cursor_t, "btree_io.cursor", positive_t, typeClass );

  declareProcedure( btree_new_file_t,  "btree_io.new_file", ParseBTreeNewFile'access );
  declareProcedure( btree_clear_t,     "btree_io.clear",    ParseBTreeClear'access );

  declareProcedure( btree_create_t,    "btree_io.create",   ParseBTreeCreate'access );
  declareProcedure( btree_close_t,     "btree_io.close",    ParseBTreeClose'access );
  declareProcedure( btree_open_t,      "btree_io.open",     ParseBTreeOpen'access );
  declareFunction(  btree_is_open_t,   "btree_io.is_open",  ParseBTreeIsOpen'access );
  declareFunction(  btree_name_t,      "btree_io.name",     ParseBTreeName'access );
  declareProcedure( btree_delete_t,    "btree_io.delete",   ParseBTreeDelete'access );
  declareProcedure( btree_flush_t,     "btree_io.flush",    ParseBTreeFlush'access );

  declareProcedure( btree_set_t,       "btree_io.set",      ParseBTreeSet'access );
  declareFunction(  btree_get_t,       "btree_io.get",      ParseBTreeGet'access );
  declareFunction(  btree_has_element_t, "btree_io.has_element",  ParseBTreeHasElement'access );
  declareProcedure( btree_remove_t,    "btree_io.remove",      ParseBTreeRemove'access );
  declareProcedure( btree_increment_t, "btree_io.increment",ParseBTreeIncrement'access );
  declareProcedure( btree_decrement_t, "btree_io.decrement",ParseBTreeDecrement'access );
  declareProcedure( btree_add_t,       "btree_io.add", ParseBTreeAdd'access );
  declareProcedure( btree_replace_t,   "btree_io.replace", ParseBTreeReplace'access );
  declareProcedure( btree_append_t,    "btree_io.append", ParseBTreeAppend'access );
  declareProcedure( btree_prepend_t,   "btree_io.prepend", ParseBTreePrepend'access );

  declareProcedure( btree_new_cursor_t,  "btree_io.new_cursor", ParseBTreeNewCursor'access );
  declareProcedure( btree_open_cursor_t,  "btree_io.open_cursor", ParseBTreeOpenCursor'access );
  declareProcedure( btree_close_cursor_t,  "btree_io.close_cursor", ParseBTreeCloseCursor'access );
  declareProcedure( btree_first_t,     "btree_io.first", ParseBTreeFirst'access );
  declareProcedure( btree_next_t,      "btree_io.next", ParseBTreeNext'access );
  declareProcedure( btree_previous_t,  "btree_io.previous", ParseBTreePrevious'access );
  declareProcedure( btree_last_t,      "btree_io.last", ParseBTreeLast'access );

  declareNamespaceClosed( "btree_io" );

end StartupBTree;

procedure ShutdownBTree is
begin
  null;
end ShutdownBTree;

end parser_btree_io;
