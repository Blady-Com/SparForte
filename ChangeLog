For the latest news, visit the SparForte web site.

SparForte 2.2's additional testing and new data type features necessary to implement packages in the future.

CHANGES SINCE 2.1

1. New: Can now subtract one calendar.time value from another.

2. New: New examples: game_24.sp, string_prepend.sp, sumseries.sp, sumsq.sp, ternary_logic.sp, twelve_days.sp, time_function.sp, graph_series.sp.

3. Fix: Anonymous array element type is treated as applied to eliminate concrete/abstract error.

4. New: OS package functions.  os.pid, equivalent to Bourne shell $$. os.error_string (strerror) and documentation fixed.

5. Fix: instead of "identifier not declared", now get "too few parameter" when calling a user function with too few parameters.  Might be a more efficient way to implement this.

6. New: abstract procedures and subprograms.

7. Fix: functions without a return value statement produce an error.

8. New: limited arrays, records and anonymous arrays.

9. Fix: re-raise fixed to work in if statements in an exception handler.

10. New: "nonstandard" software model as a catch-all for no standard.

11. Fix: variables with explicit limited qualifier are now limited.

12. New: return statements may have a when clause, like an exit statement.

13. Refactor: constants are no longer a separate identifier class from variables.  constant is now an identifier usage qualifier like limited and abstract and can be applied to any identifier class.  constants are now variables with a usage of "constant".

14. Change: command variables must now be limited instead of constant, in line with new limited functionality.  They cannot be used in an expression or assigned to.

15. New: at debug prompt, limited variables, like constants, may be assigned a value but will report a warning.

16. Fix: calling a procedure or function with no parameters when parameters were expected produces an appropriate error message.

17. New: types and subtypes may have an affirm clause/block to validate values, as in programming-by-contract.

18. New. raise statements can have a when clause, like an exit statement.

19. Fix: statements starting with paths like /bin/bash and bin/bash are now recognized as shell commands.

20. Fix: broken pipes (such as env | head) no longer show meaningless error messages.

21. Refactor: parser.adb broken up into interpreter.adb and parser child packages.

22. Change: better error message for dollar expansions with missing variable names.

23. New: pragma annotate extended with icon, rationale and screenshot fields.

24. Fix: pragma annotate HTML output is html-encoded.

25. Fix: executable statements in blocks no longer allowed type and variable declarations.

26. Change: the first word in a statement can be a Bourne shell command with path characters and certain punctuation symbols allowed in the names (e.g. minus).

27. Refactor: to improve performance, type checking suppressed at run-time unless necessary, 11% faster for monty.sp example.

28. Fix: backquotes in a shell word no longer have 2 extra characters after substitution.

29. Fix: unstructured scripts no longer pull/discard top-level declarations early nested block exit.

30. Fix: fixed memory leak with directory_operations.open declaring new resources each time.

31. Change: affirm blocks run in restricted mode as a precaution against side-effects.

32. Change: (Mehdi) Strings package now has more univeral parameters and return results to reduce type casting and to follow a similar design to the numerics package.

33. New: SparForte core regression tests passing on Cygwin build.

34. Change: Unstructured scripts no longer require variables to be declared
before use.  This is to make unstructure scripts more convenient for simple
tasks, and to give them different behaviour to structured scripts.

35. Fix: raising an undeclared exception now shows an identifier not declared
error, not a identifier of the wrong class error.

36. New: configure --release flag toggles a development version default prompt or the normal release default prompt, "=>".

37. Fix: Case statements no long require string and character types for corresponding literals, which was causing errors on derrived types.  Now match the semanitcs of the rest of the language.

38. New: logs package.

39. Fix: removed comment on waiting after pipelines to cleanup zombied processes.

40. Fix: 2>&1 on a non-existent command no longer crashes due to the Ada.Text_IO package.

41. Change: 2>&1 was limited to the end of a command pipeline, but now may be
used with any command in a pipeline.

42. Change: 2> / 2>> was limited to the end of a command pipeline, but now may be used with any command in a pipeline.

43. Fix: exception messages now appear in gcc format when -g/gcc_errors is used.

44. Fix: Latin-1 support fixed in string literals: => "cmd", cmd "param".  The high ASCII charaters are still escaped in error messages.

45. Fix: env shows limited and constant variables with the appropriate word.

46. Fix: declared but never used errors are working again.

47. Change: volatiles are no longer allowed in expressions (to avoid side-effects).  See #48.

48. New: double-write data race side-effects not allowed in function calls or type contracts.

49. Fix: enabling trace no longer disables performance monitoring line counting.

50. New: copies declarations (similar to renaming declarations).  Can be used to safely copy volatiles.

51. New: pragma manual_test and manual_test_result [not tested, docs needed].

52. New: contracts and functions writing variables used in the same expression will report an error (side-effects).

53. Change: semi-colons are now optional in backquoted expressions (except if the expression includes a comment). [test]

54. Fix: echo `foo` now works.  It was disabled in the code...why did I do that? [test]

55. New: pragma restriction( no_volatiles );

56. New: os.last_child and equivalent $!.  Get the pid of the last child run in the background.

57. Change: trailing whitespace is an error in backquote literals.

58. New: pragma unchecked_volatile( var ) to create a volatile which is allowed in expressions (provided restriction( no_volatiles ) is not used).

59. (Blady) Fixed: SDL fixes for SDL support on Mac OS/X.

60. Fix: a command with a & immediately following no longer has the & treated as part of the command name.

61. Change: if a statement begins with a shell command, shell quoting is now supported.  Enclosing the command in double quotes no longer uses string literal rules but is treated a quoted shell word.

