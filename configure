# Configure script
# by Ken O. Burtch
#
# For environment variables that affect this script, see the INSTALL file.
#
# This Bourne shell script was written on Bash.  It isn't supposed to depend
# on BASH but I haven't tested it on other shells so your results may vary.
#
#set -eu
# CVS: $Id$

# BUSH

# OS Environment
#
# Use an ARCH variable if one exists.  Otherwise, determine the operating
# system type and processor architecture type by uname.

echo "Configuring BUSH..."
sleep 1
echo
echo -n "checking for locate command... "
locate --help >/dev/null 2>/dev/null
if [ $? -ne 0 ] ; then
   # freebsd has different parameters
   locate thisisafakepatternbecausefreebsdlocatehasnohelp >/dev/null 2>/dev/null
fi
if [ $? -ne 0 ] ; then
   echo "Could not run locate"
   echo
   echo "Locate is used by this script to ensure you have all the required"
   echo "software to build BUSH."
   echo
   echo "Please install GNU locate and run updatedb (as root)."
   exit 1
else
   echo "yes"
fi
cd src
echo -n "checking for OS (uname -s)... "
OS=`uname -s 2>/dev/null`
if [ $? -ne 0 ] ; then
   echo "failed"
   echo
   echo "Could not run uname -s"
   exit 1
fi
TMP=`echo "$OS" | cut -c1-6`
if [ "$TMP" = "CYGWIN" ] ; then
   OS="cygwin"
fi
echo "yes"
echo -n "checking for architecture (\$ARCH)... "
if [ -z "$ARCH" ] ; then
   echo "no"
   echo -n "checking for architecture (uname -p)... "
   ARCH=`uname -p 2>/dev/null`
   if [ $? -ne 0 ] ; then   # Cygwin runs but says unknown
      ARCH="unknown"
   fi
   if [ "$ARCH" = "unknown" ] ; then

      ARCH=`uname -m 2>/dev/null`
      if [ $? -ne 0 ] ; then
         echo "failed"
         echo
         echo "Could not run uname -p or -m. Use \$ARCH to specify your architecture."
         echo "For example, export ARCH=i386"
         exit 1
      fi
   fi
fi
echo "yes"
echo -n "making for... "

# A rose by any other name...any AMD/Intel x86 is a 386 for testing purposes
if [ "$ARCH" = "i486" ] ; then
   CPU_ARCH="i386"
elif [ "$ARCH" = "i586" ] ; then
   CPU_ARCH="i386"
elif [ "$ARCH" = "i686" ] ; then
   CPU_ARCH="i386"
elif [ "$ARCH" = "athlon" ] ; then # Intel-ish
   CPU_ARCH="i386"
elif [ "$ARCH" = "x86_64" ] ; then # Fedora: Intel-ish, just use 32-bit
   export ARCH="athlon64" # Fedora: x86_64 isn't valid gcc option
   CPU_ARCH="i386"
elif [ "$ARCH" = "alpha" ] ; then
   CPU_ARCH="alpha"
else
   CPU_ARCH="$ARCH"
fi
CPU_FLAG="-march"
if [ "$OS" = "Linux" -a "$CPU_ARCH" = "i386" ] ; then
   echo -n "Linux/Intel/AMD"
   if test -r bush_os.ads ; then
      echo " (cached, make distclean to remove)";
   else
      echo
      cp bush_linux.ads bush_os.ads
      if [ $? -ne 0 ] ; then
         echo "Unable to find appropriate bush_os source files"
         exit 1
      fi
   fi
elif [ "$OS" = "FreeBSD" -a "$CPU_ARCH" = "i386" ] ; then
   echo -n "FreeBSD/Intel/AMD"
   if test -r bush_os.ads ; then
      echo " (cached)";
   else
      echo
      cp bush_freebsd.ads bush_os.ads
      if [ $? -ne 0 ] ; then
         echo "Unable to find appropriate bush_os source files"
         exit 1
      fi
   fi
   CFLAGSTYPE="-DFREEBSD"
elif [ "$OS" = "Linux" -a "$CPU_ARCH" = "alpha" ] ; then
   echo -n "Linux/Alpha"
   if test -r bush_os.ads ; then
      echo " (cached, make distclean to remove)";
   else
      echo
      cp bush_alpha.ads bush_os.ads
      if [ $? -ne 0 ] ; then
         echo "Unable to find appropriate bush_os source files"
         exit 1
      fi
   fi
   ARCH="ev5"
   CPU_FLAG="-mcpu"  # -march not supported on alpha
elif [ "$OS" = "HPUX" ] ; then
   echo -n "HP-UX"
   if test ! -w bush_os.ads ; then
      echo " (cached)";
   else
      echo
      cp bush_hp.ads bush_os.ads
      if [ $? -ne 0 ] ; then
         echo "Unable to find appropriate bush_os source files"
         exit 1
      fi
      cp bush_hp.adb bush_os.adb
      if [ $? -ne 0 ] ; then
         echo "Unable to find appropriate bush_os source files"
         exit 1
      fi
   fi
   echo "  (Warning: BUSH HP-UX support is obsolete...you will need to edit bush_hp.ads/adb)"
elif [ "$OS" = "cygwin" ] ; then
   echo -n "Cygwin"
   if test -r bush_os.ads ; then
      echo " (cached, make distclean to remove)";
   else
      echo
      cp bush_cygwin.ads bush_os.ads
      if [ $? -ne 0 ] ; then
         echo "Unable to find appropriate bush_os source files"
         exit 1
      fi
   fi
else
   echo "unknown"
   echo
   echo "I couldn't identify your operating system."
   echo
   echo "BUSH requires a bush_os.ads file to make operating system calls."
   echo "If I made a mistake and your O/S is supported, manually copy"
   echo "a bush_* file to bush_os.  If you're operating system isn't supported"
   echo "and if you are experienced and have time, you can create a new"
   echo "bush_os.ads for your operating system.  Consult the Hacker's Guide"
   echo "in the documentation on how to port BUSH to a new operating system."
   exit 1
fi
# Check compiler
if test -f bush_os.ali ; then
   if test ! -w bush_os.ali ; then
      echo "bush_os.ali exists and is not writable...please remove it"
      exit 1
   fi
fi
echo -n "checking for gcc w/Ada (with gcc)... "
CC="gcc"
(exec $CC -c bush_os.ads >/dev/null 2>/dev/null)
#FreeBSD requires exec in a subshell because a command not found error
#is reported before the stderr redirect
if [ $? -eq 0 ] ; then
   echo "yes"
else
   echo "no"
   echo -n "checking for gcc w/Ada (with gnatgcc)... "
   CC="gnatgcc"
   (exec $CC -c bush_os.ads >/dev/null 2>/dev/null)
   if [ $? -eq 0 ] ; then
      echo "yes"
   else
      echo "no"
      echo -n "checking for gcc w/Ada (with adagcc)... "
      CC="adagcc"
      (exec $CC -c bush_os.ads >/dev/null 2>/dev/null)
      if [ $? -eq 0 ] ; then
         echo "yes"
      else
         echo "no"
         echo -n "checking for gcc w/Ada (with gcc-gnat)... "
         CC="gcc-gnat"
         $CC -c bush_os.ads >/dev/null 2>/dev/null
         if [ $? -eq 0 ] ; then
            echo "yes"
         else
            echo "no"
            echo
            echo "--------------------------------------------------------------------------"
            echo "Your system does not have a GCC compiler that understands the Ada language"
            echo
            echo "The name of the GCC package with Ada support depends on your operating system."
            echo "Examples:"
            echo " - Debian Linux users can try apt-get install gnat-3.3 (or similar)"
            echo " - Fedora Linux users can try add/remove software gcc-gnat"
            echo " - SuSE Linux   users can try add/remove software gcc-ada"
            echo
            echo "Specifically, BUSH requires one of the following:"
            echo " - GCC 3.x or newer with the Ada language enabled (http://gcc.gnu.org)"
            echo " - ACT's GNAT compiler 3.14 or newer, based on GCC 2.7.2 (ftp://cs.nyu.edu/pub/gnat)"
            echo
            echo "Please update your system and re-run this script."
            echo "--------------------------------------------------------------------------"
            exit 1
        fi
      fi
   fi
fi

# Check for the Ada Run-Time Library

echo -n "checking for libgnat (ldconfig -p, Linux)... "
TMP=`/sbin/ldconfig -p 2>/dev/null | grep libgnat`
if [ -z "$TMP" ] ; then
   echo "no"
   echo -n "checking for libgnat (ldconfig -r, FreeBSD)... "
   TMP=`/sbin/ldconfig -r 2>/dev/null | grep adalib`
   # was libgnat.  For freebsd, just settle on having adalib in the hints
   if [ -z "$TMP" ] ; then
      echo "no"
      echo -n "checking for static libgnat.a only (e.g. Slackware)... "
      TMP=`/usr/bin/locate adalib/libgnat`
      if [ $? -eq 0 ] ; then
         TMP2=`/usr/bin/locate adalib/libgnat.a`
      else
         TMP2="fail-me"
      fi
      if [ "$TMP" = "$TMP2" ] ; then
         echo "yes"
      else
         echo "no"
         echo
         echo "GCC Ada or GNAT is installed but the Ada Run-Time Environment"
         echo "(libgnat) was not found.  If libgnat.so was installed, you"
         echo "may need to run ldconfig (as root) to update the shared"
         echo "library search paths.  You may need to edit ld.so.conf first"
         echo "and add the path to libgnat's directory.  If libgnat.a was"
         echo "installed, run updatedb (as root) and this script should"
         echo "detect it."
         echo
         exit 1
      fi
   else
      echo "yes"
   fi
 else
  echo "yes"
fi
# Test version of scanner-calendar for this GCC Ada

if test ! -d ../test ; then
   echo "test directory missing"
   exit 192
fi
cd ../test  # src to test
cp "../src/c_scanner.c" "c_scanner.c"
echo -n "compiling c calendar linkage function..."
(exec gcc -c c_scanner.c > /dev/null 2>/dev/null )
if [ $? -ne 0 ] ; then
   echo "no"
   echo
   echo "This is a copy of the __gnat_localtime_tzoff function (renamed to"
   echo "a __bush prefix).  The C compile failed."
   exit 192
else
   echo "yes"
fi
SCANNER_VERSION="scanner-calendar-latest"
echo -n "trying calendar $SCANNER_VERSION ..."
cp "../src/$SCANNER_VERSION.ads" "scanner-calendar.ads"
cp "../src/$SCANNER_VERSION.adb" "scanner-calendar.adb"
(exec gnatmake -f scanner_test.adb -largs c_scanner.o > /dev/null 2>/dev/null )
if [ $? -ne 0 ] ; then
   echo "no"
   SCANNER_VERSION="scanner-calendar-pre441"
   echo -n "trying calendar $SCANNER_VERSION ..."
   cp "../src/$SCANNER_VERSION.ads" "scanner-calendar.ads"
   cp "../src/$SCANNER_VERSION.adb" "scanner-calendar.adb"
   (exec gnatmake -f scanner_test.adb -largs c_scanner.o > /dev/null 2>/dev/null )
   if [ $? -ne 0 ] ; then
      echo "no"
      SCANNER_VERSION="scanner-calendar-pre431"
      echo -n "trying calendar $SCANNER_VERSION ..."
      cp "../src/$SCANNER_VERSION.ads" "scanner-calendar.ads"
      cp "../src/$SCANNER_VERSION.adb" "scanner-calendar.adb"
      (exec gnatmake -f scanner_test.adb -largs c_scanner.o > /dev/null 2>/dev/null )
      if [ $? -ne 0 ] ; then
         echo "no"
         SCANNER_VERSION="scan-cal-gnat314"
         echo -n "trying calendar $SCANNER_VERSION ..."
         cp "../src/$SCANNER_VERSION.ads" "scanner-calendar.ads"
         cp "../src/$SCANNER_VERSION.adb" "scanner-calendar.adb"
         (exec gnatmake -f scanner_test.adb -largs c_scanner.o > /dev/null 2>/dev/null )
         if [ $? -ne 0 ] ; then
            echo "no"
            echo
            echo "no suitable version of scanner-calendar found"
            echo
            echo "scanner-calendar is a modified version of ada-calendar that"
            echo "has the time as a non-private time so time values can be stored in"
            echo "Bush variables.  If this is a newer version of Ada, you may"
            echo "need to provide your own version of scanner-calendar."
            exit 1
         else
            cp "../src/$SCANNER_VERSION.ads" "../src/scanner-calendar.ads"
            cp "../src/$SCANNER_VERSION.adb" "../src/scanner-calendar.adb"
            echo "yes"
         fi
      else
         cp "../src/$SCANNER_VERSION.ads" "../src/scanner-calendar.ads"
         cp "../src/$SCANNER_VERSION.adb" "../src/scanner-calendar.adb"
         echo "yes"
      fi
   else
      cp "../src/$SCANNER_VERSION.ads" "../src/scanner-calendar.ads"
      cp "../src/$SCANNER_VERSION.adb" "../src/scanner-calendar.adb"
      echo "yes"
   fi
else
   cp "../src/$SCANNER_VERSION.ads" "../src/scanner-calendar.ads"
   cp "../src/$SCANNER_VERSION.adb" "../src/scanner-calendar.adb"
   echo "yes"
fi
# clean test directory
rm *.o *.ali scanner_test
rm scanner-calendar*
rm c_scanner.c
cd ../src/

# Check for ncurses (which includes tput)

echo -n "checking for tput... "
# was init now clear since init no longer in freebsd?!
(exec tput clear >/dev/null 2>/dev/null)
if [ $? -eq 0 ] ; then
   echo "yes"
else
   echo "no"
   echo
   echo "tput is sometimes included with the ncurses library (e.g. Cygwin)."
   echo "Please install ncurses or another package with the tput command."
   exit 1
fi

# Databases

echo -n "checking for postgresql (pg_config)..."
HAS_DBS="1"
TMP=`(exec pg_config --version 2>/dev/null)`
if [ -z "$TMP" ] ; then
   echo "no"
   HAS_DBS=""
else
   echo "yes"
fi
echo -n "checking for mysql (mysql_config)..."
TMP=`(exec mysql_config --version 2>/dev/null)`
if [ -z "$TMP" ] ; then
   echo "no"
   HAS_DBS=""
else
   echo "yes"
fi
if [ -z "$HAS_DBS" ] ; then
   echo "Bush 1.x requires both MySQL and PostgreSQL to be installed"
   echo "The servers do not have to be running but the configuration"
   echo "utilities must be present - pg_config and mysql_config -"
   echo "and the development files to allow Bush to compile database"
   echo "support for these databases."
   echo "Please install these files to continue."
   exit 1
fi

# Check for the libSDL (Simple DirectMedia Layer) Library

echo -n "checking for libSDL (ldconfig -p, Linux)... "
TMP=`/sbin/ldconfig -p 2>/dev/null | grep libSDL`
if [ -z "$TMP" ] ; then
   echo "no"
   echo -n "checking for libSDL (ldconfig -r, FreeBSD)... "
   TMP=`/sbin/ldconfig -r 2>/dev/null | grep libSDL`
   if [ -z "$TMP" ] ; then
      echo "no"
      echo "No version of the Simple DirectMedia Layer (libSDL) was found"
      echo "If you have installed libSDL, you may need to use ldconfig (as"
      echo "root) to update the shared library search paths for libSDL"
      echo
      echo "libSDL is used by BUSH to access sound and graphics on your machine"
      exit 1
    else
       echo "yes"
    fi
 else
  echo "yes"
fi

if [ -z "$SDL_CONFIG" ] ; then
   SDL_CONFIG="sdl-config"
fi
echo -n "checking for SDL_config... "
TMP=`(exec $SDL_CONFIG --version 2>/dev/null)`
if [ -z "$TMP" ] ; then
   # Cannot find SDL_config?  Use these defaults for makefile sed...
   if [ "$OS" = "FreeBSD" ] ; then
      SDLLIBSTYPE="-L\/usr\/local\/lib -lSDL-1.1\ -lSDL_image -lpthread"
      SDLINCLTYPE="-I\/usr\/local\/include\/SDL11"
   else
      SDLLIBSTYPE="-l\ SDL\ -l\ SDL_image"
      SDLINCLTYPE="-I\/usr\/include\/SDL"
   fi
   echo "no"
else
   # Remove -D_REENTRANT (not recognized by GCC Ada) and escape special
   # sed characters (space and slash)
   SDLLIBSTYPE=`$SDL_CONFIG --libs`" -lSDL_image"
   SDLLIBSTYPE=`echo "$SDLLIBSTYPE" | sed 's/\ /\\\ /g;s/\//\\\\\//g'`
   SDLINCLTYPE=`$SDL_CONFIG --cflags | sed "s/\ -D_REENTRANT//g"`
   SDLINCLTYPE=`echo "$SDLINCLTYPE" | sed 's/\ /\\\ /g;s/\//\\\\\//g'`
   echo "yes"
fi

# Bytes are aligned differently between 32-bit and 64-bit SDL data structures.
# Default to 64-bit else use 32-bit.
echo -n "selecting SDL binding... "
cd ../test
(exec gcc sdlversion.c -lSDL > /dev/null 2>/dev/null )
TMP=`./a.out`
rm a.out
cd ../src
if [ "$TMP" = "32" ] ; then
   cp bush_os-sdl-32bit.ads bush_os-sdl.ads
   chmod u+w bush_os-sdl.ads
   echo "32 bit"
elif [ "$TMP" = "64" ] ; then
   cp bush_os-sdl-64bit.ads bush_os-sdl.ads
   chmod u+w bush_os-sdl.adb
   echo "64 bit"
else
   echo "unknown"
   echo
   echo "Unable to determine if 32-bit or 64-bit SDL is being used."
   exit 192
fi

# Check for the libSDL_image (Simple DirectMedia Layer image loading) Library
# This is normally included with SDL but is not included with Fedora Core 4 Linux.

echo -n "checking for libSDL_image (ldconfig -p, Linux)... "
TMP=`/sbin/ldconfig -p 2>/dev/null | grep libSDL_image`
if [ -z "$TMP" ] ; then
   echo "no"
   echo -n "checking for libSDL_image (ldconfig -r, FreeBSD)... "
   TMP=`/sbin/ldconfig -r 2>/dev/null | grep libSDL_image`
   if [ -z "$TMP" ] ; then
      echo "no"
      echo "No version of the Simple DirectMedia Layer image library (libSDL_Image) was found"
      echo "This auxillary library is normally included with libSDL."
      echo "Fedora users can install it using this command: yum install SDL_image"
      echo "If you have installed libSDL_image, you may need to use ldconfig (as"
      echo "root) to update the shared library search paths for libSDL_image"
      echo
      echo "libSDL_image is used by BUSH to load image files (JPEGs, GIFs, etc.)"
      exit 1
    else
       echo "yes"
    fi
 else
  echo "yes"
fi

# Check for the libSDL_ttf (Simple DirectMedia Layer truetype font) Library

#echo -n "checking for libSDL_ttf (ldconfig -p, Linux)... "
#TMP=`/sbin/ldconfig -p 2>/dev/null | grep libSDL_ttf`
#if [ -z "$TMP" ] ; then
#   echo "no"
#   echo -n "checking for libSDL_image (ldconfig -r, FreeBSD)... "
#   TMP=`/sbin/ldconfig -r 2>/dev/null | grep libSDL_ttf`
#   if [ -z "$TMP" ] ; then
#      echo "no"
#      echo "No version of the Simple DirectMedia Layer truetype font library (libSDL_Image) was found"
#      echo "This is a third-party  library not normally included with libSDL."
#      echo "Fedora users can install it using this command: yum install SDL_ttf"
#      echo "If you have installed libSDL_ttf, you may need to use ldconfig (as"
#      echo "root) to update the shared library search paths for libSDL_ttf"
#      echo
#      echo "libSDL_ttf is not currently used.  It will be used by the pen package to"
#      echo "to display text."
#      exit 1
#    else
#       echo "yes"
#    fi
# else
#  echo "yes"
#fi

# Make

echo -n "checking for gmake (\$GMAKE)... "
if [ ! -z "$GMAKE" ] ; then
   echo "yes"
   GMAKETYPE="$GMAKE"
else
   echo "no"
   echo -n "checking for gmake... "
   GMAKETYPE=gmake
   $GMAKETYPE --version > /dev/null
   if [ $? -eq 0 ] ; then
      echo "yes"
   else
      echo "no"
      echo -n 'checking for ${GMAKE}... '
      if [ ! -z "$GMAKE" ] ; then
         GMAKETYPE="$GMAKE"
         $GMAKETYPE --version > /dev/null
         if [ $? -eq 0 ] ; then
            echo "yes"
         else
            echo "no"
            echo
            echo "BUSH requires GNU make.  GNU make normally has a gmake alias"
            echo "but some systems (like Debian/Linux, Cygwin) do not include the"
            echo "alias.  If your system calls gmake by another name (such as"
            echo "'make') use the GMAKE shell variable to specify the name."
            echo
            echo "For example, 'GMAKE=make; export GMAKE"
            exit 1
         fi
      else
         echo "no"
         echo
         echo "BUSH requires GNU make.  GNU make normally has a gmake alias"
         echo "but some systems (like Debian/Linux) do not include the"
         echo "alias.  If your system calls gmake by another name (such as"
         echo "'make') use the GMAKE shell variable to specify the name."
         echo "For example, 'GMAKE=make; export GMAKE"
         exit 1
      fi
   fi
fi

echo "BUSH is configured"

# ADAVOX library

echo
sleep 3
echo "Configuring third-party ADAVOX (AU/WAV Sound Library)..."
sleep 1

# /dev/dsp

echo
echo -n "adavox library: checking for /dev/dsp... "
if test ! -z "$BASH" ; then
   test -a /dev/dsp
else
   test -r /dev/dsp
fi
if [ $? -eq 0 ] ; then
   echo "yes"
else
      echo "no"
      echo
      echo "ADAVOX requires /dev/dsp.  Create a /dev/dsp symlink to your real audio device"
      echo "(If you don't care about audio support, try ln -s /dev/null /dev/dsp)"
      exit 1
fi

echo "ADAVOX library is configured"

# APQ library

echo
sleep 3
echo "Configuring third-party APQ (Database Library)..."
sleep 1
echo -n "apq library: checking for one or more database config scripts... "
TMP=`(exec pg_config --version 2>/dev/null)`
if [ -z "$TMP" ] ; then
   TMP=`(exec mysql_config --version 2>/dev/null)`
   if [ -z "$TMP" ] ; then
      echo "no"
      echo
      echo "The APQ library uses the pg_config and mysql_config scripts to configure"
      echo "itself.  Not all operating systems include these, or they include them"
      echo "as part of the 'devel' packages.  If you don't have these scripts, you"
      echo "copy them from the database sources into /usr/local/bin"
      exit 1
   else
      echo "yes"
   fi
else
   echo "yes"
fi

echo "Running APQ's configure..."
cd apq-2.1
./configure
cd -
#if test -f Makeincl ; then
#   mv -f Makeincl apq-2.1/Makeincl
#fi
echo "APQ library is configured"

# Create GNUmakefile from GNUmakefile.orig

echo
echo "Returning to BUSH..."
echo "Creating src/GNUmakefile..."

sed "s/CPUFLAG/$CPU_FLAG/g;s/CCTYPE/$CC/g;s/CPUTYPE/$ARCH/g;s/GMAKETYPE/$GMAKETYPE/g;s/SDLLIBSTYPE/$SDLLIBSTYPE/g;s/SDLINCLTYPE/$SDLINCLTYPE/g;s/CFLAGSTYPE/$CFLAGSTYPE/g" < GNUmakefile.orig > GNUmakefile
cd ..
echo "Creating GNUmakefile..."
sed "s/CPUFLAG/$CPU_FLAG/g;s/CCTYPE/$CC/g;s/CPUTYPE/$ARCH/g;s/GMAKETYPE/$GMAKETYPE/g;s/CFLAGSTYPE/$CFLAGSTYPE/g" < GNUmakefile.orig > GNUmakefile

# Done

echo "-------------------------------------------------------------------"
echo "Please read the INSTALL file if you have problems making BUSH."
echo
if [ "$GMAKE" != "" ] ; then
   echo "Type $GMAKE all"
else
   echo "Type gmake all"
fi
exit 0

